#
# Section #1. The following section contains the configurations of the index time
#          log source renaming functions. This configuration is optional and it is
#          meant to be deployed on the Splunk heavy forwarders, indexer nodes, or 
#		   all-in-one standalone instances.    
#
[rename_cef_source]
DEST_KEY = MetaData:Source
REGEX = CEF\:+[0-9]{1,}+\|
FORMAT = source::ArcSight://CEF_Data_Stream

#
# Section #2. The following section contains all the mandatory configurations for 
#          the search time field extractions which are used on the Splunk search 
#		   heads and all-in-one standalone instances. They are not required by the 
#		   Splunk heavy forwarders nor Splunk indexer nodes.
#

#
# Field extractions from the heads of the CEF format logs. This stanza will extract
#          the mandatory fields of the CEF logs, including version, dvc_product, 
#          dvc_vendor, dvc_version, name, deviceEventClassId, severity.
#

#
# The following stanza is used to cover the majority known CEF heads, including the
#          Microsoft SQL Action Audit group logs in Windows Event Logs and processed
#          by the Windows connectors or flex connectors.
#
[cef_header_fields]
#
# The following REGEX is not compatible with the Microsoft SQL Action Audit group logs in CEF format.
# If you are confident that you do not and will not have the CEF format Microsoft SQL Action Audit group logs
#    in you Splunk environment, you can disable the REGEX above and enable the REGEX below for fast speed.
#
REGEX = CEF\:+(?<version>[0-9]{1,})[\|](?<dvc_vendor>[^\|]{0,})[\|](?<dvc_product>[^\|]{0,})[\|](?<dvc_version>[^\|]{0,})[\|](?<deviceEventClassId>(([^(\\\|)]{1,}[\\]{1}[\|]{1}){1,}[^\|]{1,}|[^\|]{0,}))[\|](?<name>([^\|]{0,}))[\|](?<severity>[^\|]{1,}|)[\|]+.*

#
# The following sections are the configurations which are used to extract the standard
#          CEF fields from the event logs.
#

#
# The following stanzas are used to perform field extractions for those fields which 
#          contains the long values and white spaces.
#
[cef_extended_fields_producers_1]
REGEX = (?m)(act|app|cat|c6a[1-4]{1}Label|cfp[1-4]{1}Label|cn[1-4]{1}Label|cs[1-6]{1}Label|destinationDnsDomain|destinationServiceName|destinationTranslatedAddress|deviceCustomDate[1-2]{1}|deviceCustomDate[1-2]{1}Label|deviceDnsDomain|deviceFacility|deviceInboundInterface|deviceNtDomain|deviceOutboundInterface|devicePayloadId|deviceProcessName|deviceTranslatedAddress|dhost|dmac|dntdom|dpriv|dproc|dtz|duid|duser|end|fileCreateTime|fileHash|fileId|fileModificationTime|filePath|filePermission|fileType|flexDate[1-2]{1}|flexDate[1-2]{1}Label|flexString[1-4]{1}Label|fname|msg|oldFileCreateTime|oldFileHash|oldFileModificationTime|oldFileName|oldFilePath|oldFilePermission|oldFileType|proto|reason|request|requestClientApplication|requestContext|requestCookies|requestMethod|rt|sntdom|sourceDnsDomain|sourceServiceName|sourceTranslatedAddress|spriv|sproc|start|suid|suser)[\=]([^\=\r\n]{1,})[\s\r\n]
FORMAT = $1::$2
MV_ADD = false

[cef_extended_fields_consumers_1]
REGEX = (?m)(agentDnsDomain|agentNtDomain|agentTranslatedAddress|agentZoneURI|agentTranslatedZoneURI|agt|ahost|amac|art|at|atz|destinationTranslatedZoneURI|destinationZoneURI|deviceTranslatedZoneURI|dlat|dlong|deviceZoneURI|rawEvent|sourceTranslatedZoneURI|sourceZoneURI|slat|slong)[\=]([^\=\r\n]{1,})[\s\r\n]
FORMAT = $1::$2
MV_ADD = false

#
# The following stanzas are used to extract the fields without the white spaces.
#
[cef_extended_fields_producers_2]
REGEX = (?m)(c6a[1-4]{1}|cfp[1-4]{1}|cn[1-4]{1}|cnt|destinationTranslatedPort|deviceDirection|deviceExternalId|dpid|dpt|dst|dvc|dvchost|dvcmac|dvcpid|externalId|fsize|in|oldFileId|oldFileSize|out|outcome|shost|smac|sourceTranslatedPort|spid|spt|src|type)[\=]([^\s\r\n]{1,})[\s\r\n]
FORMAT = $1::$2
MV_ADD = false

[cef_extended_fields_consumers_2]
REGEX = (?m)(agentTranslatedZoneExternalID|agentZoneExternalID|aid|av|customerExternalID|customerURI|destinationTranslatedZoneExternalID|destinationZoneExternalID|deviceTranslatedZoneExternalID|deviceZoneExternalID|eventId|sourceTranslatedZoneExternalID|sourceZoneExternalID)[\=]([^\s\r\n]{1,})[\s\r\n]
FORMAT = $1::$2
MV_ADD = false

#
# This stanza is used to extract the custom string fields and flex string fields which
#          contain long values, white spaces and structures similar to HTML/XML.
#
[cef_extended_fields_producers_3]
REGEX = (?m)(cs[1-6]{1}|flexString[1-4]{1})[\=](\<[^\>]{1,}\>|[^\=\r\n]{1,})[\s\r\n]
FORMAT = $1::$2
MV_ADD = false


#
# The following stanzas are used to perform the additional non-standard field extractions, including:
#           - the fields which are not commonly acrossed the main ArcSight ingest platforms (ESM, loggers, Investigator)
#           - the additional ad.someFieldNameHere such as ad.WindowFamily, ad.Key[0], etc.
#
[cef_extended_fields_extract_1]
REGEX = (?m)(catdt|categorySignificance|categoryBehavior|categoryDeviceGroup|categoryTechnique|categoryOutcome|categoryObject|cefVer|deviceSeverity|eventAnnotationStageUpdateTime|eventAnnotationModificationTime|eventAnnotationAuditTrail|eventAnnotationVersion|eventAnnotationFlags|eventAnnotationEndTime|eventAnnotationManagerReceiptTime)[\=]([^\=\r\n]{1,})[\s\r\n]
FORMAT = $1::$2
MV_ADD = false

[cef_extended_fields_extract_2]
REGEX = (?m)(ad\.[A-Za-z0-9]{1,})[\=]([^\=\r\n]{1,})[\s\r\n]
FORMAT = $1::$2
MV_ADD = false

[cef_extended_fields_extract_3]
REGEX = (?m)(ad\.Key\[[0-9]{1,}\])[\=]([^\=\r\n]{1,})(?:[\s\r\n]|$)
FORMAT = $1::$2
MV_ADD = false


#
# Section #3. The following configurations are the optional. They are designed 
#          to merge the custom field label with their values to form the new 
#          fields during the search time field extractions on the Splunk search
#          heads or all-in-one standalone Splunk instances.
#

#
# CEF IPv6 addresses
#
[cef_custom_c6address_1a]
REGEX = c6a1\=\s?([^=]+)\s.*c6a1Label\=\s?([^=]+)\s
FORMAT = $2::$1
MV_ADD = false

[cef_custom_c6address_1b]
REGEX = c6a1Label\=\s?([^=]+)\s.*c6a1\=\s?([^=]+)\s
FORMAT = $1::$2
MV_ADD = false

[cef_custom_c6address_2a]
REGEX = c6a2\=\s?([^=]+)\s.*c6a2Label\=\s?([^=]+)\s
FORMAT = $2::$1
MV_ADD = false

[cef_custom_c6address_2b]
REGEX = c6a2Label\=\s?([^=]+)\s.*c6a2\=\s?([^=]+)\s
FORMAT = $1::$2
MV_ADD = false

[cef_custom_c6address_3a]
REGEX = c6a3\=\s?([^=]+)\s.*c6a3Label\=\s?([^=]+)\s
FORMAT = $2::$1
MV_ADD = false

[cef_custom_c6address_3b]
REGEX = c6a3Label\=\s?([^=]+)\s.*c6a3\=\s?([^=]+)\s
FORMAT = $1::$2
MV_ADD = false

[cef_custom_c6address_4a]
REGEX = c6a4\=\s?([^=]+)\s.*c6a4Label\=\s?([^=]+)\s
FORMAT = $2::$1
MV_ADD = false

[cef_custom_c6address_4b]
REGEX = c6a4Label\=\s?([^=]+)\s.*c6a4\=\s?([^=]+)\s
FORMAT = $1::$2
MV_ADD = false

#
# CEF custom device dates
#
[cef_custom_devicedate_1a]
REGEX = deviceCustomDate1\=\s?([^=]+)\s.*deviceCustomDate1Label\=\s?([^=]+)\s
FORMAT = $2::$1
MV_ADD = false

[cef_custom_devicedate_1b]
REGEX = deviceCustomDate1Label\=\s?([^=]+)\s.*deviceCustomDate1\=\s?([^=]+)\s
FORMAT = $1::$2
MV_ADD = false

[cef_custom_devicedate_2a]
REGEX = deviceCustomDate2\=\s?([^=]+)\s.*deviceCustomDate2Label\=\s?([^=]+)\s
FORMAT = $2::$1
MV_ADD = false

[cef_custom_devicedate_2b]
REGEX = deviceCustomDate2Label\=\s?([^=]+)\s.*deviceCustomDate2\=\s?([^=]+)\s
FORMAT = $1::$2
MV_ADD = false

#
# CEF custom flex dates
#
[cef_custom_flexdate_1a]
REGEX = flexDate1\=\s?([^=]+)\s.*flexDate1Label\=\s?([^=]+)\s
FORMAT = $2::$1
MV_ADD = false

[cef_custom_flexdate_1b]
REGEX = flexDate1Label\=\s?([^=]+)\s.*flexDate1\=\s?([^=]+)\s
FORMAT = $1::$2
MV_ADD = false

[cef_custom_flexdate_2a]
REGEX = flexDate2\=\s?([^=]+)\s.*flexDate2Label\=\s?([^=]+)\s
FORMAT = $2::$1
MV_ADD = false

[cef_custom_flexdate_2b]
REGEX = flexDate2Label\=\s?([^=]+)\s.*flexDate2\=\s?([^=]+)\s
FORMAT = $1::$2
MV_ADD = false

#
# CEF custom flex strings
#
[cef_custom_flexstring_1a]
REGEX = flexString1\=\s?([^=]+)\s.*flexString1Label\=\s?([^=]+)\s
FORMAT = $2::$1
MV_ADD = false

[cef_custom_flexstring_1b]
REGEX = flexString1Label\=\s?([^=]+)\s.*flexString1\=\s?([^=]+)\s
FORMAT = $1::$2
MV_ADD = false

[cef_custom_flexstring_2a]
REGEX = flexString2\=\s?([^=]+)\s.*flexString2Label\=\s?([^=]+)\s
FORMAT = $2::$1
MV_ADD = false

[cef_custom_flexstring_2b]
REGEX = flexString2Label\=\s?([^=]+)\s.*flexString2\=\s?([^=]+)\s
FORMAT = $1::$2
MV_ADD = false

[cef_custom_flexstring_3a]
REGEX = flexString3\=\s?([^=]+)\s.*flexString3Label\=\s?([^=]+)\s
FORMAT = $2::$1
MV_ADD = false

[cef_custom_flexstring_3b]
REGEX = flexString3Label\=\s?([^=]+)\s.*flexString3\=\s?([^=]+)\s
FORMAT = $1::$2
MV_ADD = false

[cef_custom_flexstring_4a]
REGEX = flexString4\=\s?([^=]+)\s.*flexString4Label\=\s?([^=]+)\s
FORMAT = $2::$1
MV_ADD = false

[cef_custom_flexstring_4b]
REGEX = flexString4Label\=\s?([^=]+)\s.*flexString4\=\s?([^=]+)\s
FORMAT = $1::$2
MV_ADD = false

#
# CEF custom float point numbers
#
[cef_custom_floatpoint_1a]
REGEX = cfp1\=\s?([^=]+)\s.*cfp1Label\=\s?([^=]+)\s
FORMAT = $2::$1
MV_ADD = false

[cef_custom_floatpoint_1b]
REGEX = cfp1Label\=\s?([^=]+)\s.*cfp1\=\s?([^=]+)\s
FORMAT = $1::$2
MV_ADD = false

[cef_custom_floatpoint_2a]
REGEX = cfp2\=\s?([^=]+)\s.*cfp2Label\=\s?([^=]+)\s
FORMAT = $2::$1
MV_ADD = false

[cef_custom_floatpoint_2b]
REGEX = cfp2Label\=\s?([^=]+)\s.*cfp2\=\s?([^=]+)\s
FORMAT = $1::$2
MV_ADD = false

[cef_custom_floatpoint_3a]
REGEX = cfp3\=\s?([^=]+)\s.*cfp3Label\=\s?([^=]+)\s
FORMAT = $2::$1
MV_ADD = false

[cef_custom_floatpoint_3b]
REGEX = cfp3Label\=\s?([^=]+)\s.*cfp3\=\s?([^=]+)\s
FORMAT = $1::$2
MV_ADD = false

[cef_custom_floatpoint_4a]
REGEX = cfp4\=\s?([^=]+)\s.*cfp4Label\=\s?([^=]+)\s
FORMAT = $2::$1
MV_ADD = false

[cef_custom_floatpoint_4b]
REGEX = cfp4Label\=\s?([^=]+)\s.*cfp4\=\s?([^=]+)\s
FORMAT = $1::$2
MV_ADD = false


#
# CEF custom numbers
#
[cef_custom_number_1a]
REGEX = cn1\=\s?([^=]+)\s.*cn1Label\=\s?([^=]+)\s
FORMAT = $2::$1
MV_ADD = false

[cef_custom_number_1b]
REGEX = cn1Label\=\s?([^=]+)\s.*cn1\=\s?([^=]+)\s
FORMAT = $1::$2
MV_ADD = false

[cef_custom_number_2a]
REGEX = cn2\=\s?([^=]+)\s.*cn2Label\=\s?([^=]+)\s
FORMAT = $2::$1
MV_ADD = false

[cef_custom_number_2b]
REGEX = cn2Label\=\s?([^=]+)\s.*cn2\=\s?([^=]+)\s
FORMAT = $1::$2
MV_ADD = false

[cef_custom_number_3a]
REGEX = cn3\=\s?([^=]+)\s.*cn3Label\=\s?([^=]+)\s
FORMAT = $2::$1
MV_ADD = false

[cef_custom_number_3b]
REGEX = cn3Label\=\s?([^=]+)\s.*cn3\=\s?([^=]+)\s
FORMAT = $1::$2
MV_ADD = false

[cef_custom_number_4a]
REGEX = cn4\=\s?([^=]+)\s.*cn4Label\=\s?([^=]+)\s
FORMAT = $2::$1
MV_ADD = false

[cef_custom_number_4b]
REGEX = cn4Label\=\s?([^=]+)\s.*cn4\=\s?([^=]+)\s
FORMAT = $1::$2
MV_ADD = false

#
# CEF custom strings
#
[cef_custom_string_1a]
REGEX = cs1\=\s?([^=]+)\s.*cs1Label\=\s?([^=]+)\s
FORMAT = $2::$1
MV_ADD = false

[cef_custom_string_1b]
REGEX = cs1Label\=\s?([^=]+)\s.*cs1\=\s?([^=]+)\s
FORMAT = $1::$2
MV_ADD = false

[cef_custom_string_2a]
REGEX = cs2\=\s?([^=]+)\s.*cs2Label\=\s?([^=]+)\s
FORMAT = $2::$1
MV_ADD = false

[cef_custom_string_2b]
REGEX = cs2Label\=\s?([^=]+)\s.*cs2\=\s?([^=]+)\s
FORMAT = $1::$2
MV_ADD = false

[cef_custom_string_3a]
REGEX = cs3\=\s?([^=]+)\s.*cs3Label\=\s?([^=]+)\s
FORMAT = $2::$1
MV_ADD = false

[cef_custom_string_3b]
REGEX = cs3Label\=\s?([^=]+)\s.*cs3\=\s?([^=]+)\s
FORMAT = $1::$2
MV_ADD = false

[cef_custom_string_4a]
REGEX = cs4\=\s?([^=]+)\s.*cs4Label\=\s?([^=]+)\s
FORMAT = $2::$1
MV_ADD = false

[cef_custom_string_4b]
REGEX = cs4Label\=\s?([^=]+)\s.*cs4\=\s?([^=]+)\s
FORMAT = $1::$2
MV_ADD = false

[cef_custom_string_5a]
REGEX = cs5\=\s?([^=]+)\s.*cs5Label\=\s?([^=]+)\s
FORMAT = $2::$1
MV_ADD = false

[cef_custom_string_5b]
REGEX = cs5Label\=\s?([^=]+)\s.*cs5\=\s?([^=]+)\s
FORMAT = $1::$2
MV_ADD = false

[cef_custom_string_6a]
REGEX = cs6\=\s?([^=]+)\s.*cs6Label\=\s?([^=]+)\s
FORMAT = $2::$1
MV_ADD = false

[cef_custom_string_6b]
REGEX = cs6Label\=\s?([^=]+)\s.*cs6\=\s?([^=]+)\s
FORMAT = $1::$2
MV_ADD = false
