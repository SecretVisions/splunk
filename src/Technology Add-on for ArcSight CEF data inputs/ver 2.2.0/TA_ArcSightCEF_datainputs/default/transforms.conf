#
# Section #1. The following section contains all the mandatory configurations for 
#          the search time field extractions which are used on the Splunk search 
#		   heads and all-in-one standalone instances. They are not required by the 
#		   Splunk heavy forwarders nor Splunk indexer nodes.
#

#
# Field extractions from the heads of the CEF format logs. This stanza will extract
#          the mandatory fields of the CEF logs, including version, dvc_product, 
#          dvc_vendor, dvc_version, name, deviceEventClassId, severity.
#

#
# Comon regex modulars for the field extractions in CEF headers
#
[c_rex_cef_version]
REGEX = [0-9]{1,}

[c_rex_cef_head_std_nullable]
REGEX = [^\|]{0,}

[c_rex_cef_head_std_notnull]
REGEX = [^\|]{1,}

[c_rex_cef_head_adv_withpiple]
REGEX = ([^(\\\|)]{0,}[\\]{1}[\|]{1}){1,}[^\|]{1,}|[[c_rex_cef_head_std_nullable]]

#
# Common regex modulars for the field extractions in CEF event data
#

[c_rex_field_value_std_nullable]
REGEX = [^\=\r\n]{0,}

[c_rex_field_value_std_notnull]
REGEX = [^\=\r\n]{1,}

[c_rex_field_value_std_nospace]
REGEX = [^\s\r\n]{1,}

[c_rex_field_value_std_withxml]
REGEX = \<[^\>]{1,}\>

[c_rex_field_value_adv_complex]
REGEX = [[c_rex_field_value_std_withxml]]|[[c_rex_field_value_std_notnull]]

[c_rex_field_value_lazy_mode_equal]
REGEX = [^\=]{1,}

[c_rex_field_value_lazy_mode_comma]
REGEX = [^\,]{1,}

[c_rex_field_value_number]
REGEX = [\-]{0,1}[0-9\.]{1,}

#
# Regex modulars for the list of the ArcSight CEF fields to be extracted in each 
#    stanza. 
#

#
# List of the fields with number values (int, float points, long, double, etc)
#
[c_rex_field_extended_list_1]
REGEX = [\s]cfp[1-4]{1}|cn[1-4]{1}|cnt|destinationTranslatedPort|deviceDirection|dlat|dlong|dpid|dpt|dvcpid|eventId|fsize|in|oldFileSize|out|slat|slong|sourceTranslatedPort|spid|spt|type

#
# List of the fields with the short field names which need to be called out saperately
#
[c_rex_field_extended_list_2]
REGEX = [\s]agentTranslatedAddress|agentDnsDomain|agentNtDomain|aid|agt|amac|art|at|av|c6a[1-4]{1}|destinationDnsDomain|destinationTranslatedAddress|deviceDnsDomain|deviceTranslatedAddress|dhost|dmac|dst|duser|duid|dvc|end|externalId|fileHash|oldFileHash|proto|rt|shost|smac|sourceDnsDomain|sourceTranslatedAddress|src|suid

#
# List of the fields with strings and white spaces in their values
#
[c_rex_field_extended_list_3]
REGEX = [\s]act|agentTranslatedZoneExternalID|agentZoneExternalID|ahost|app|atz|c6a[1-4]{1}Label|cat|cfp[1-4]{1}Label|cn[1-4]{1}Label|cs[1-6]{1}Label|customerExternalID|destinationServiceName|destinationTranslatedZoneExternalID|destinationZoneExternalID|deviceCustomDate[1-2]{1}Label|deviceExternalId|deviceFacility|deviceInboundInterface|deviceNtDomain|deviceOutboundInterface|devicePayloadId|deviceProcessName|deviceTranslatedZoneExternalID|deviceZoneExternalID|dntdom|dpriv|dproc|dtz|dvchost|dvcmac|fileCreateTime|fileId|fileModificationTime|fileType|flexDate[1-2]{1}Label|flexString[1-4]{1}Label|fname|oldFileCreateTime|oldFileId|oldFileModificationTime|oldFileName|oldFileType|outcome|request|requestClientApplication|requestMethod|sntdom|sourceServiceName|sourceTranslatedZoneExternalID|sourceZoneExternalID|spriv|sproc|start|suser

#
# List of the fields with complicated string values (e.g., HTML/XML style syntax with single or double quotations.
#
[c_rex_field_extended_list_4]
REGEX = [\s]agentTranslatedZoneURI|agentZoneURI|cs[1-6]{1}|customerURI|destinationTranslatedZoneURI|destinationZoneURI|deviceTranslatedZoneURI|deviceZoneURI|deviceCustomDate[1-2]{1}|filePath|filePermission|flexDate[1-2]{1}|flexString[1-4]{1}|msg|oldFilePath|oldFilePermission|rawEvent|reason|requestContext|requestCookies|sourceTranslatedZoneURI|sourceZoneURI

#
# Non standard CEF fields
#
[c_rex_field_extract_list]
REGEX = _cefVer|baseEventIds|catdt|categorySignificance|categoryBehavior|categoryDeviceGroup|categoryTechnique|categoryOutcome|categoryObject|deviceSeverity|eventAnnotationStageUpdateTime|eventAnnotationModificationTime|eventAnnotationAuditTrail|eventAnnotationVersion|eventAnnotationFlags|eventAnnotationEndTime|eventAnnotationManagerReceiptTime|generatorID|mrt

#
# Fields (ad.someFieldNameHere)
#
[c_rex_field_extract_adfields]
REGEX = ad\.[A-Za-z0-9]{1,}

#
# Fields (ad.Key[{int}])
#
[c_rex_field_extract_adkeys]
REGEX = ad\.Key\[[0-9]{1,}\]

#
# The following stanza is used to cover the majority known CEF heads, including the
#          Microsoft SQL Action Audit group logs in Windows Event Logs and processed
#          by the Windows connectors or flex connectors.
#

[c_cef_header_fields]
#
# The following REGEX is compatible with the Microsoft SQL Action Audit group logs in CEF format.
# It provides better compatibilities of log formats than the second REGEX. 
# This REGEX is enabled by default and it's not recommended to be disabled and swith to the other one.
#
REGEX = CEF\:+(?<version>[[c_rex_cef_version]])[\|](?<deviceVendor>[[c_rex_cef_head_std_nullable]])[\|](?<deviceProduct>[[c_rex_cef_head_std_nullable]])[\|](?<deviceVersion>[[c_rex_cef_head_std_nullable]])[\|](?<deviceEventClassId>[[c_rex_cef_head_adv_withpiple]])[\|](?<name>[[c_rex_cef_head_adv_withpiple]])[\|](?<severity>[[c_rex_cef_head_std_nullable]])[\|]+.*
#
# The following REGEX is not compatible with the Microsoft SQL Action Audit group logs in CEF format.
# If you are confident that you do not and will not have the CEF format Microsoft SQL Action Audit group logs
#    in you Splunk environment, you can disable the REGEX above and enable the REGEX below for fast speed.
#
# REGEX = CEF\:+(?<version>[[c_rex_cef_version]])[\|](?<deviceVendor>[[c_rex_cef_head_std_nullable]])[\|](?<deviceProduct>[[c_rex_cef_head_std_nullable]])[\|](?<deviceVersion>[[c_rex_cef_head_std_nullable]])[\|](?<deviceEventClassId>[[c_rex_cef_head_std_nullable]])[\|](?<name>[[c_rex_cef_head_std_nullable]])[\|](?<severity>[[c_rex_cef_head_std_nullable]])[\|]+.*

#
# The following sections are the configurations which are used to extract the standard
#          CEF fields from the event logs.
#

#
# Fields with number values (int, float points, long, double, etc)
#
[c_cef_standard_fields_group_1]
REGEX = (?m)([[c_rex_field_extended_list_1]])[\=]([[c_rex_field_value_number]])(?:[\s\r\n]|$)
FORMAT = $1::$2
MV_ADD = false

#
# Fields with the short field names which need to be called out saperately
#
[c_cef_standard_fields_group_2]
REGEX = (?m)([[c_rex_field_extended_list_2]])[\=]([[c_rex_field_value_std_nospace]])(?:[\s\r\n]|$)
FORMAT = $1::$2
MV_ADD = false

#
# Fields with strings and white spaces in their values
#
[c_cef_standard_fields_group_3]
REGEX = (?m)([[c_rex_field_extended_list_3]])[\=]([[c_rex_field_value_std_notnull]])(?:[\s\r\n]|$)
FORMAT = $1::$2
MV_ADD = false

#
# Fields with complicated string values (e.g., HTML/XML style syntax with single or double quotations.
#
[c_cef_standard_fields_group_4]
REGEX = (?m)([[c_rex_field_extended_list_4]])[\=]([[c_rex_field_value_adv_complex]])(?:[\s\r\n]|$)
FORMAT = $1::$2
MV_ADD = false

#
# The following stanzas are used to perform the additional non-standard field extractions, including:
#           - the fields which are not commonly acrossed the main ArcSight ingest platforms (ESM, loggers, Investigator)
#           - the additional ad.someFieldNameHere such as ad.WindowFamily, ad.Key[0], etc.
#

#
# Non standard CEF fields
#
[c_cef_extended_fields_extract_1]
REGEX = (?m)[\s]{0,1}([[c_rex_field_extract_list]])[\=]([[c_rex_field_value_std_notnull]])(?:[\s\r\n]|$)
FORMAT = $1::$2
MV_ADD = false

#
# Fields (ad.someFieldNameHere)
#
[c_cef_extended_fields_extract_2]
REGEX = (?m)[\s]{0,1}([[c_rex_field_extract_adfields]])[\=]([[c_rex_field_value_std_notnull]])(?:[\s\r\n]|$)
FORMAT = $1::$2
MV_ADD = false

#
# Fields (ad.Key[{int}])
#
[c_cef_extended_fields_extract_3]
REGEX = (?m)[\s]{0,1}([[c_rex_field_extract_adkeys]])[\=]([[c_rex_field_value_std_notnull]])(?:[\s\r\n]|$)
FORMAT = $1::$2
MV_ADD = false

#
# Fields (ad.randomFieldNameWithSpecialCharacters)
#
[c_cef_extended_fields_extract_4]
REGEX = (?m)[\s]{0,1}(ad\.[[c_rex_field_value_lazy_mode_equal]])[\=]([[c_rex_field_value_std_notnull]])(?:[\s\r\n]|$)
FORMAT = $1::$2
MV_ADD = false


#
# Event field arrays with multple values
#
[c_cef_extended_fields_baseEventId]
SOURCE_KEY = baseEventIds
REGEX = (?m)([[c_rex_field_value_lazy_mode_comma]])[\,]{0,1}
FORMAT = baseEventId::$1
MV_ADD = true


#
# Section #2. The following configurations are the optional. They are designed 
#          to merge the custom field label with their values to form the new 
#          fields during the search time field extractions on the Splunk search
#          heads or all-in-one standalone Splunk instances.
#

#
# CEF IPv6 addresses
#
[c_cef_custom_c6address_1a]
REGEX = c6a1\=\s?([[c_rex_field_value_lazy_mode_equal]])\s.*c6a1Label\=\s?([[c_rex_field_value_lazy_mode_equal]])\s
FORMAT = $2::$1
MV_ADD = false

[c_cef_custom_c6address_1b]
REGEX = c6a1Label\=\s?([[c_rex_field_value_lazy_mode_equal]])\s.*c6a1\=\s?([[c_rex_field_value_lazy_mode_equal]])\s
FORMAT = $1::$2
MV_ADD = false

[c_cef_custom_c6address_2a]
REGEX = c6a2\=\s?([[c_rex_field_value_lazy_mode_equal]])\s.*c6a2Label\=\s?([[c_rex_field_value_lazy_mode_equal]])\s
FORMAT = $2::$1
MV_ADD = false

[c_cef_custom_c6address_2b]
REGEX = c6a2Label\=\s?([[c_rex_field_value_lazy_mode_equal]])\s.*c6a2\=\s?([[c_rex_field_value_lazy_mode_equal]])\s
FORMAT = $1::$2
MV_ADD = false

[c_cef_custom_c6address_3a]
REGEX = c6a3\=\s?([[c_rex_field_value_lazy_mode_equal]])\s.*c6a3Label\=\s?([[c_rex_field_value_lazy_mode_equal]])\s
FORMAT = $2::$1
MV_ADD = false

[c_cef_custom_c6address_3b]
REGEX = c6a3Label\=\s?([[c_rex_field_value_lazy_mode_equal]])\s.*c6a3\=\s?([[c_rex_field_value_lazy_mode_equal]])\s
FORMAT = $1::$2
MV_ADD = false

[c_cef_custom_c6address_4a]
REGEX = c6a4\=\s?([[c_rex_field_value_lazy_mode_equal]])\s.*c6a4Label\=\s?([[c_rex_field_value_lazy_mode_equal]])\s
FORMAT = $2::$1
MV_ADD = false

[c_cef_custom_c6address_4b]
REGEX = c6a4Label\=\s?([[c_rex_field_value_lazy_mode_equal]])\s.*c6a4\=\s?([[c_rex_field_value_lazy_mode_equal]])\s
FORMAT = $1::$2
MV_ADD = false

#
# CEF custom device dates
#
[c_cef_custom_devicedate_1a]
REGEX = deviceCustomDate1\=\s?([[c_rex_field_value_lazy_mode_equal]])\s.*deviceCustomDate1Label\=\s?([[c_rex_field_value_lazy_mode_equal]])\s
FORMAT = $2::$1
MV_ADD = false

[c_cef_custom_devicedate_1b]
REGEX = deviceCustomDate1Label\=\s?([[c_rex_field_value_lazy_mode_equal]])\s.*deviceCustomDate1\=\s?([[c_rex_field_value_lazy_mode_equal]])\s
FORMAT = $1::$2
MV_ADD = false

[c_cef_custom_devicedate_2a]
REGEX = deviceCustomDate2\=\s?([[c_rex_field_value_lazy_mode_equal]])\s.*deviceCustomDate2Label\=\s?([[c_rex_field_value_lazy_mode_equal]])\s
FORMAT = $2::$1
MV_ADD = false

[c_cef_custom_devicedate_2b]
REGEX = deviceCustomDate2Label\=\s?([[c_rex_field_value_lazy_mode_equal]])\s.*deviceCustomDate2\=\s?([[c_rex_field_value_lazy_mode_equal]])\s
FORMAT = $1::$2
MV_ADD = false

#
# CEF custom flex dates
#
[c_cef_custom_flexdate_1a]
REGEX = flexDate1\=\s?([[c_rex_field_value_lazy_mode_equal]])\s.*flexDate1Label\=\s?([[c_rex_field_value_lazy_mode_equal]])\s
FORMAT = $2::$1
MV_ADD = false

[c_cef_custom_flexdate_1b]
REGEX = flexDate1Label\=\s?([[c_rex_field_value_lazy_mode_equal]])\s.*flexDate1\=\s?([[c_rex_field_value_lazy_mode_equal]])\s
FORMAT = $1::$2
MV_ADD = false

[c_cef_custom_flexdate_2a]
REGEX = flexDate2\=\s?([[c_rex_field_value_lazy_mode_equal]])\s.*flexDate2Label\=\s?([[c_rex_field_value_lazy_mode_equal]])\s
FORMAT = $2::$1
MV_ADD = false

[c_cef_custom_flexdate_2b]
REGEX = flexDate2Label\=\s?([[c_rex_field_value_lazy_mode_equal]])\s.*flexDate2\=\s?([[c_rex_field_value_lazy_mode_equal]])\s
FORMAT = $1::$2
MV_ADD = false

#
# CEF custom flex strings
#
[c_cef_custom_flexstring_1a]
REGEX = flexString1\=\s?([[c_rex_field_value_lazy_mode_equal]])\s.*flexString1Label\=\s?([[c_rex_field_value_lazy_mode_equal]])\s
FORMAT = $2::$1
MV_ADD = false

[c_cef_custom_flexstring_1b]
REGEX = flexString1Label\=\s?([[c_rex_field_value_lazy_mode_equal]])\s.*flexString1\=\s?([[c_rex_field_value_lazy_mode_equal]])\s
FORMAT = $1::$2
MV_ADD = false

[c_cef_custom_flexstring_2a]
REGEX = flexString2\=\s?([[c_rex_field_value_lazy_mode_equal]])\s.*flexString2Label\=\s?([[c_rex_field_value_lazy_mode_equal]])\s
FORMAT = $2::$1
MV_ADD = false

[c_cef_custom_flexstring_2b]
REGEX = flexString2Label\=\s?([[c_rex_field_value_lazy_mode_equal]])\s.*flexString2\=\s?([[c_rex_field_value_lazy_mode_equal]])\s
FORMAT = $1::$2
MV_ADD = false

[c_cef_custom_flexstring_3a]
REGEX = flexString3\=\s?([[c_rex_field_value_lazy_mode_equal]])\s.*flexString3Label\=\s?([[c_rex_field_value_lazy_mode_equal]])\s
FORMAT = $2::$1
MV_ADD = false

[c_cef_custom_flexstring_3b]
REGEX = flexString3Label\=\s?([[c_rex_field_value_lazy_mode_equal]])\s.*flexString3\=\s?([[c_rex_field_value_lazy_mode_equal]])\s
FORMAT = $1::$2
MV_ADD = false

[c_cef_custom_flexstring_4a]
REGEX = flexString4\=\s?([[c_rex_field_value_lazy_mode_equal]])\s.*flexString4Label\=\s?([[c_rex_field_value_lazy_mode_equal]])\s
FORMAT = $2::$1
MV_ADD = false

[c_cef_custom_flexstring_4b]
REGEX = flexString4Label\=\s?([[c_rex_field_value_lazy_mode_equal]])\s.*flexString4\=\s?([[c_rex_field_value_lazy_mode_equal]])\s
FORMAT = $1::$2
MV_ADD = false

#
# CEF custom float point numbers
#
[c_cef_custom_floatpoint_1a]
REGEX = cfp1\=\s?([[c_rex_field_value_lazy_mode_equal]])\s.*cfp1Label\=\s?([[c_rex_field_value_lazy_mode_equal]])\s
FORMAT = $2::$1
MV_ADD = false

[c_cef_custom_floatpoint_1b]
REGEX = cfp1Label\=\s?([[c_rex_field_value_lazy_mode_equal]])\s.*cfp1\=\s?([[c_rex_field_value_lazy_mode_equal]])\s
FORMAT = $1::$2
MV_ADD = false

[c_cef_custom_floatpoint_2a]
REGEX = cfp2\=\s?([[c_rex_field_value_lazy_mode_equal]])\s.*cfp2Label\=\s?([[c_rex_field_value_lazy_mode_equal]])\s
FORMAT = $2::$1
MV_ADD = false

[c_cef_custom_floatpoint_2b]
REGEX = cfp2Label\=\s?([[c_rex_field_value_lazy_mode_equal]])\s.*cfp2\=\s?([[c_rex_field_value_lazy_mode_equal]])\s
FORMAT = $1::$2
MV_ADD = false

[c_cef_custom_floatpoint_3a]
REGEX = cfp3\=\s?([[c_rex_field_value_lazy_mode_equal]])\s.*cfp3Label\=\s?([[c_rex_field_value_lazy_mode_equal]])\s
FORMAT = $2::$1
MV_ADD = false

[c_cef_custom_floatpoint_3b]
REGEX = cfp3Label\=\s?([[c_rex_field_value_lazy_mode_equal]])\s.*cfp3\=\s?([[c_rex_field_value_lazy_mode_equal]])\s
FORMAT = $1::$2
MV_ADD = false

[c_cef_custom_floatpoint_4a]
REGEX = cfp4\=\s?([[c_rex_field_value_lazy_mode_equal]])\s.*cfp4Label\=\s?([[c_rex_field_value_lazy_mode_equal]])\s
FORMAT = $2::$1
MV_ADD = false

[c_cef_custom_floatpoint_4b]
REGEX = cfp4Label\=\s?([[c_rex_field_value_lazy_mode_equal]])\s.*cfp4\=\s?([[c_rex_field_value_lazy_mode_equal]])\s
FORMAT = $1::$2
MV_ADD = false


#
# CEF custom numbers
#
[c_cef_custom_number_1a]
REGEX = cn1\=\s?([[c_rex_field_value_lazy_mode_equal]])\s.*cn1Label\=\s?([[c_rex_field_value_lazy_mode_equal]])\s
FORMAT = $2::$1
MV_ADD = false

[c_cef_custom_number_1b]
REGEX = cn1Label\=\s?([[c_rex_field_value_lazy_mode_equal]])\s.*cn1\=\s?([[c_rex_field_value_lazy_mode_equal]])\s
FORMAT = $1::$2
MV_ADD = false

[c_cef_custom_number_2a]
REGEX = cn2\=\s?([[c_rex_field_value_lazy_mode_equal]])\s.*cn2Label\=\s?([[c_rex_field_value_lazy_mode_equal]])\s
FORMAT = $2::$1
MV_ADD = false

[c_cef_custom_number_2b]
REGEX = cn2Label\=\s?([[c_rex_field_value_lazy_mode_equal]])\s.*cn2\=\s?([[c_rex_field_value_lazy_mode_equal]])\s
FORMAT = $1::$2
MV_ADD = false

[c_cef_custom_number_3a]
REGEX = cn3\=\s?([[c_rex_field_value_lazy_mode_equal]])\s.*cn3Label\=\s?([[c_rex_field_value_lazy_mode_equal]])\s
FORMAT = $2::$1
MV_ADD = false

[c_cef_custom_number_3b]
REGEX = cn3Label\=\s?([[c_rex_field_value_lazy_mode_equal]])\s.*cn3\=\s?([[c_rex_field_value_lazy_mode_equal]])\s
FORMAT = $1::$2
MV_ADD = false

[c_cef_custom_number_4a]
REGEX = cn4\=\s?([[c_rex_field_value_lazy_mode_equal]])\s.*cn4Label\=\s?([[c_rex_field_value_lazy_mode_equal]])\s
FORMAT = $2::$1
MV_ADD = false

[c_cef_custom_number_4b]
REGEX = cn4Label\=\s?([[c_rex_field_value_lazy_mode_equal]])\s.*cn4\=\s?([[c_rex_field_value_lazy_mode_equal]])\s
FORMAT = $1::$2
MV_ADD = false

#
# CEF custom strings
#
[c_cef_custom_string_1a]
REGEX = cs1\=\s?([[c_rex_field_value_lazy_mode_equal]])\s.*cs1Label\=\s?([[c_rex_field_value_lazy_mode_equal]])\s
FORMAT = $2::$1
MV_ADD = false

[c_cef_custom_string_1b]
REGEX = cs1Label\=\s?([[c_rex_field_value_lazy_mode_equal]])\s.*cs1\=\s?([[c_rex_field_value_lazy_mode_equal]])\s
FORMAT = $1::$2
MV_ADD = false

[c_cef_custom_string_2a]
REGEX = cs2\=\s?([[c_rex_field_value_lazy_mode_equal]])\s.*cs2Label\=\s?([[c_rex_field_value_lazy_mode_equal]])\s
FORMAT = $2::$1
MV_ADD = false

[c_cef_custom_string_2b]
REGEX = cs2Label\=\s?([[c_rex_field_value_lazy_mode_equal]])\s.*cs2\=\s?([[c_rex_field_value_lazy_mode_equal]])\s
FORMAT = $1::$2
MV_ADD = false

[c_cef_custom_string_3a]
REGEX = cs3\=\s?([[c_rex_field_value_lazy_mode_equal]])\s.*cs3Label\=\s?([[c_rex_field_value_lazy_mode_equal]])\s
FORMAT = $2::$1
MV_ADD = false

[c_cef_custom_string_3b]
REGEX = cs3Label\=\s?([[c_rex_field_value_lazy_mode_equal]])\s.*cs3\=\s?([[c_rex_field_value_lazy_mode_equal]])\s
FORMAT = $1::$2
MV_ADD = false

[c_cef_custom_string_4a]
REGEX = cs4\=\s?([[c_rex_field_value_lazy_mode_equal]])\s.*cs4Label\=\s?([[c_rex_field_value_lazy_mode_equal]])\s
FORMAT = $2::$1
MV_ADD = false

[c_cef_custom_string_4b]
REGEX = cs4Label\=\s?([[c_rex_field_value_lazy_mode_equal]])\s.*cs4\=\s?([[c_rex_field_value_lazy_mode_equal]])\s
FORMAT = $1::$2
MV_ADD = false

[c_cef_custom_string_5a]
REGEX = cs5\=\s?([[c_rex_field_value_lazy_mode_equal]])\s.*cs5Label\=\s?([[c_rex_field_value_lazy_mode_equal]])\s
FORMAT = $2::$1
MV_ADD = false

[c_cef_custom_string_5b]
REGEX = cs5Label\=\s?([[c_rex_field_value_lazy_mode_equal]])\s.*cs5\=\s?([[c_rex_field_value_lazy_mode_equal]])\s
FORMAT = $1::$2
MV_ADD = false

[c_cef_custom_string_6a]
REGEX = cs6\=\s?([[c_rex_field_value_lazy_mode_equal]])\s.*cs6Label\=\s?([[c_rex_field_value_lazy_mode_equal]])\s
FORMAT = $2::$1
MV_ADD = false

[c_cef_custom_string_6b]
REGEX = cs6Label\=\s?([[c_rex_field_value_lazy_mode_equal]])\s.*cs6\=\s?([[c_rex_field_value_lazy_mode_equal]])\s
FORMAT = $1::$2
MV_ADD = false
